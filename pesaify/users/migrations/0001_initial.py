# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2019-07-25 15:26
from __future__ import unicode_literals

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djmoney.models.fields
import pesaify.users.models
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('uuid', models.CharField(default=pesaify.users.models.get_default_uuid, editable=False, max_length=32, unique=True)),
                ('username', models.CharField(default=pesaify.users.models.get_default_uuid_hex, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=255, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_email_verified', models.BooleanField(default=False, help_text='Designates whether the user email is a veriyfied user', verbose_name='email verified')),
                ('is_verified', models.CharField(choices=[('2', 'UnVerified'), ('1', 'Pending'), ('3', 'Verified'), ('4', 'Under Review')], default='2', help_text='Designates whether the settlement is a verified', max_length=30, verbose_name='is verified')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('short_name', models.CharField(blank=True, max_length=30, verbose_name='short name')),
                ('sex', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'other')], default='', max_length=30, verbose_name='sex')),
                ('phone_number', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator(re.compile('\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{3}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{3}|\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{3}', 32), 'Only numbers are allowed in format 000-000-000-000', 'invalid')], verbose_name='phone number')),
                ('address', models.TextField(blank=True, max_length=400, verbose_name='Address')),
                ('address_two', models.TextField(blank=True, max_length=400, verbose_name='Second Address')),
                ('first_name', models.CharField(blank=True, max_length=256, verbose_name='first name')),
                ('middle_name', models.CharField(blank=True, max_length=256, verbose_name='middle name')),
                ('last_name', models.CharField(blank=True, max_length=256, verbose_name='last name')),
                ('color', models.CharField(blank=True, default="", max_length=9, verbose_name='color')),
                ('bio', models.TextField(blank=True, verbose_name='biography')),
                ('message', models.TextField(blank=True, verbose_name='Custom Message')),
                ('dismiss_message', models.BooleanField(default=False, verbose_name='Dismiss message')),
                ('photo', models.ImageField(blank=True, max_length=500, null=True, upload_to=pesaify.users.models.get_user_photo_file_path, verbose_name='photo')),
                ('photo_recording', models.ImageField(blank=True, max_length=500, null=True, upload_to=pesaify.users.models.get_user_photo_recording_file_path, verbose_name='photo recording')),
                ('passport', models.ImageField(blank=True, max_length=500, null=True, upload_to=pesaify.users.models.get_user_passport_file_path, verbose_name='passport')),
                ('passport_recording', models.ImageField(blank=True, max_length=500, null=True, upload_to=pesaify.users.models.get_user_passport_recording_file_path, verbose_name='passport recording')),
                ('permit_id_front', models.ImageField(blank=True, max_length=500, null=True, upload_to=pesaify.users.models.get_user_permit_id_front_file_path, verbose_name='permit / National ID Front')),
                ('permit_id_front_recording', models.ImageField(blank=True, max_length=500, null=True, upload_to=pesaify.users.models.get_user_permit_id_front_recording_file_path, verbose_name='permit / National ID Front Recording')),
                ('permit_id_back', models.ImageField(blank=True, max_length=500, null=True, upload_to=pesaify.users.models.get_user_permit_id_back_file_path, verbose_name='permit / National ID Back')),
                ('permit_id_back_recording', models.ImageField(blank=True, max_length=500, null=True, upload_to=pesaify.users.models.get_user_permit_id_back_recording_file_path, verbose_name='permit / National ID Back Recording')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('accepted_terms', models.BooleanField(default=False, verbose_name='accepted terms')),
                ('read_new_terms', models.BooleanField(default=False, verbose_name='new terms read')),
                ('lang', models.CharField(blank=True, choices=[('en', 'English (US)'), ('uk', 'Українська'), ('zh-hans', '中文(简体)')], default='en', max_length=200, verbose_name='default language')),
                ('city', models.CharField(blank=True, max_length=200, verbose_name='city')),
                ('region', models.CharField(blank=True, max_length=200, verbose_name='region')),
                ('nationality', models.CharField(blank=True, choices=[('Uganda', 'Uganda'), ('Kenya', 'Kenya'), ('Tanzania', 'Tanzania')], default='', max_length=200, verbose_name='nationality')),
                ('country_document', models.CharField(blank=True, choices=[('Uganda', 'Uganda'), ('Kenya', 'Kenya'), ('Tanzania', 'Tanzania')], default='', max_length=30, verbose_name='country document')),
                ('document_type', models.CharField(blank=True, choices=[('Passport', 'Passport'), ('Permit Or National ID', 'Permit Or National ID')], default='Passport', max_length=30, verbose_name='document type')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('balance_currency', djmoney.models.fields.CurrencyField(choices=[('XUA', 'ADB Unit of Account'), ('AFN', 'Afghani'), ('DZD', 'Algerian Dinar'), ('ARS', 'Argentine Peso'), ('AMD', 'Armenian Dram'), ('AWG', 'Aruban Guilder'), ('AUD', 'Australian Dollar'), ('AZN', 'Azerbaijanian Manat'), ('BSD', 'Bahamian Dollar'), ('BHD', 'Bahraini Dinar'), ('THB', 'Baht'), ('PAB', 'Balboa'), ('BBD', 'Barbados Dollar'), ('BYN', 'Belarussian Ruble'), ('BYR', 'Belarussian Ruble'), ('BZD', 'Belize Dollar'), ('BMD', 'Bermudian Dollar (customarily known as Bermuda Dollar)'), ('BTN', 'Bhutanese ngultrum'), ('VEF', 'Bolivar Fuerte'), ('BOB', 'Boliviano'), ('XBA', 'Bond Markets Units European Composite Unit (EURCO)'), ('BRL', 'Brazilian Real'), ('BND', 'Brunei Dollar'), ('BGN', 'Bulgarian Lev'), ('BIF', 'Burundi Franc'), ('XOF', 'CFA Franc BCEAO'), ('XAF', 'CFA franc BEAC'), ('XPF', 'CFP Franc'), ('CAD', 'Canadian Dollar'), ('CVE', 'Cape Verde Escudo'), ('KYD', 'Cayman Islands Dollar'), ('CLP', 'Chilean peso'), ('XTS', 'Codes specifically reserved for testing purposes'), ('COP', 'Colombian peso'), ('KMF', 'Comoro Franc'), ('CDF', 'Congolese franc'), ('BAM', 'Convertible Marks'), ('NIO', 'Cordoba Oro'), ('CRC', 'Costa Rican Colon'), ('HRK', 'Croatian Kuna'), ('CUP', 'Cuban Peso'), ('CUC', 'Cuban convertible peso'), ('CZK', 'Czech Koruna'), ('GMD', 'Dalasi'), ('DKK', 'Danish Krone'), ('MKD', 'Denar'), ('DJF', 'Djibouti Franc'), ('STD', 'Dobra'), ('DOP', 'Dominican Peso'), ('VND', 'Dong'), ('XCD', 'East Caribbean Dollar'), ('EGP', 'Egyptian Pound'), ('SVC', 'El Salvador Colon'), ('ETB', 'Ethiopian Birr'), ('EUR', 'Euro'), ('XBB', 'European Monetary Unit (E.M.U.-6)'), ('XBD', 'European Unit of Account 17(E.U.A.-17)'), ('XBC', 'European Unit of Account 9(E.U.A.-9)'), ('FKP', 'Falkland Islands Pound'), ('FJD', 'Fiji Dollar'), ('HUF', 'Forint'), ('GHS', 'Ghana Cedi'), ('GIP', 'Gibraltar Pound'), ('XAU', 'Gold'), ('XFO', 'Gold-Franc'), ('PYG', 'Guarani'), ('GNF', 'Guinea Franc'), ('GYD', 'Guyana Dollar'), ('HTG', 'Haitian gourde'), ('HKD', 'Hong Kong Dollar'), ('UAH', 'Hryvnia'), ('ISK', 'Iceland Krona'), ('INR', 'Indian Rupee'), ('IRR', 'Iranian Rial'), ('IQD', 'Iraqi Dinar'), ('IMP', 'Isle of Man Pound'), ('JMD', 'Jamaican Dollar'), ('JOD', 'Jordanian Dinar'), ('KES', 'Kenyan Shilling'), ('PGK', 'Kina'), ('LAK', 'Kip'), ('KWD', 'Kuwaiti Dinar'), ('AOA', 'Kwanza'), ('MMK', 'Kyat'), ('GEL', 'Lari'), ('LVL', 'Latvian Lats'), ('LBP', 'Lebanese Pound'), ('ALL', 'Lek'), ('HNL', 'Lempira'), ('SLL', 'Leone'), ('LSL', 'Lesotho loti'), ('LRD', 'Liberian Dollar'), ('LYD', 'Libyan Dinar'), ('SZL', 'Lilangeni'), ('LTL', 'Lithuanian Litas'), ('MGA', 'Malagasy Ariary'), ('MWK', 'Malawian Kwacha'), ('MYR', 'Malaysian Ringgit'), ('TMM', 'Manat'), ('MUR', 'Mauritius Rupee'), ('MZN', 'Metical'), ('MXV', 'Mexican Unidad de Inversion (UDI)'), ('MXN', 'Mexican peso'), ('MDL', 'Moldovan Leu'), ('MAD', 'Moroccan Dirham'), ('BOV', 'Mvdol'), ('NGN', 'Naira'), ('ERN', 'Nakfa'), ('NAD', 'Namibian Dollar'), ('NPR', 'Nepalese Rupee'), ('ANG', 'Netherlands Antillian Guilder'), ('ILS', 'New Israeli Sheqel'), ('RON', 'New Leu'), ('TWD', 'New Taiwan Dollar'), ('NZD', 'New Zealand Dollar'), ('KPW', 'North Korean Won'), ('NOK', 'Norwegian Krone'), ('PEN', 'Nuevo Sol'), ('MRO', 'Ouguiya'), ('TOP', 'Paanga'), ('PKR', 'Pakistan Rupee'), ('XPD', 'Palladium'), ('MOP', 'Pataca'), ('PHP', 'Philippine Peso'), ('XPT', 'Platinum'), ('GBP', 'Pound Sterling'), ('BWP', 'Pula'), ('QAR', 'Qatari Rial'), ('GTQ', 'Quetzal'), ('ZAR', 'Rand'), ('OMR', 'Rial Omani'), ('KHR', 'Riel'), ('MVR', 'Rufiyaa'), ('IDR', 'Rupiah'), ('RUB', 'Russian Ruble'), ('RWF', 'Rwanda Franc'), ('XDR', 'SDR'), ('SHP', 'Saint Helena Pound'), ('SAR', 'Saudi Riyal'), ('RSD', 'Serbian Dinar'), ('SCR', 'Seychelles Rupee'), ('XAG', 'Silver'), ('SGD', 'Singapore Dollar'), ('SBD', 'Solomon Islands Dollar'), ('KGS', 'Som'), ('SOS', 'Somali Shilling'), ('TJS', 'Somoni'), ('SSP', 'South Sudanese Pound'), ('LKR', 'Sri Lanka Rupee'), ('XSU', 'Sucre'), ('SDG', 'Sudanese Pound'), ('SRD', 'Surinam Dollar'), ('SEK', 'Swedish Krona'), ('CHF', 'Swiss Franc'), ('SYP', 'Syrian Pound'), ('BDT', 'Taka'), ('WST', 'Tala'), ('TZS', 'Tanzanian Shilling'), ('KZT', 'Tenge'), ('XXX', 'The codes assigned for transactions where no currency is involved'), ('TTD', 'Trinidad and Tobago Dollar'), ('MNT', 'Tugrik'), ('TND', 'Tunisian Dinar'), ('TRY', 'Turkish Lira'), ('TMT', 'Turkmenistan New Manat'), ('TVD', 'Tuvalu dollar'), ('AED', 'UAE Dirham'), ('XFU', 'UIC-Franc'), ('USD', 'US Dollar'), ('USN', 'US Dollar (Next day)'), ('UGX', 'Uganda Shilling'), ('CLF', 'Unidad de Fomento'), ('COU', 'Unidad de Valor Real'), ('UYI', 'Uruguay Peso en Unidades Indexadas (URUIURUI)'), ('UYU', 'Uruguayan peso'), ('UZS', 'Uzbekistan Sum'), ('VUV', 'Vatu'), ('CHE', 'WIR Euro'), ('CHW', 'WIR Franc'), ('KRW', 'Won'), ('YER', 'Yemeni Rial'), ('JPY', 'Yen'), ('CNY', 'Yuan Renminbi'), ('ZMK', 'Zambian Kwacha'), ('ZMW', 'Zambian Kwacha'), ('ZWD', 'Zimbabwe Dollar A/06'), ('ZWN', 'Zimbabwe dollar A/08'), ('ZWL', 'Zimbabwe dollar A/09'), ('PLN', 'Zloty')], default='USD', editable=False, max_length=3)),
                ('balance', djmoney.models.fields.MoneyField(decimal_places=2, default=Decimal('0'), max_digits=12, verbose_name='Balance')),
                ('timezone', models.CharField(blank=True, default='UTC', max_length=200, verbose_name='default timezone')),
                ('colorize_tags', models.BooleanField(default=False, verbose_name='colorize tags')),
                ('token', models.CharField(blank=True, default=None, max_length=2000, null=True, verbose_name='token')),
                ('email_token', models.CharField(blank=True, default=None, max_length=2000, null=True, verbose_name='email token')),
                ('new_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='new email address')),
                ('is_system', models.BooleanField(default=False)),
                ('unit_system', models.CharField(blank=True, default='', max_length=2000, verbose_name='unit system')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BankSettlement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_verified', models.CharField(choices=[('2', 'UnVerified'), ('1', 'Pending'), ('3', 'Verified'), ('4', 'Under Review')], default='2', help_text='Designates whether the settlement is a verified', max_length=30, verbose_name='is verified')),
                ('currency', models.CharField(choices=[('UGX', 'Uganda Shillings (UGX)'), ('KES', 'Kenya Shillings (KZS)'), ('TZS', 'Tanzania Shillings (TZS)'), ('EUR', 'European Euro (EUR)'), ('GBP', 'Pound Sterling (GBP)'), ('USD', 'US Dollar (USD)')], max_length=256, verbose_name='currency')),
                ('name', models.CharField(max_length=100, null=True)),
                ('city', models.CharField(max_length=100, null=True)),
                ('address', models.CharField(max_length=100, null=True)),
                ('country', models.CharField(choices=[('Uganda', 'Uganda'), ('Kenya', 'Kenya'), ('Tanzania', 'Tanzania')], default='', max_length=30, verbose_name='country')),
                ('post_code', models.CharField(default='', max_length=256, verbose_name='post code')),
                ('account_name', models.CharField(max_length=100, null=True)),
                ('account_number', models.CharField(max_length=100, null=True)),
                ('swift_bic', models.CharField(max_length=100, null=True)),
                ('label', models.CharField(blank=True, default='', max_length=100, verbose_name='label')),
                ('token', models.CharField(blank=True, default=None, max_length=2000, null=True, verbose_name='token')),
                ('created_date', models.DateTimeField(auto_now=True, verbose_name='Created Date')),
                ('modified_date', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daily_maximum', models.FloatField(default=0, verbose_name='Daily Maximum')),
                ('annual_maximum', models.FloatField(default=0, verbose_name='Annual Maximum')),
                ('notify', models.BooleanField(default=True, verbose_name='notify')),
                ('speed', models.CharField(choices=[('1', 'High'), ('2', 'Medium'), ('3', 'Low')], default='2', max_length=30, verbose_name='transaction speed')),
                ('refund', models.CharField(choices=[('Current', 'Current'), ('Fixed', 'Fixed')], default='Current', max_length=30, verbose_name='refund policy')),
                ('tier0', models.CharField(choices=[('2', 'UnVerified'), ('1', 'Pending'), ('3', 'Verified'), ('4', 'Under Review')], default='2', help_text='Designates whether the business is a verified', max_length=30, verbose_name='teir 0 verified')),
                ('tier1', models.CharField(choices=[('2', 'UnVerified'), ('1', 'Pending'), ('3', 'Verified'), ('4', 'Under Review')], default='2', help_text='Designates whether the business is a verified', max_length=30, verbose_name='teir 1 verified')),
                ('tier2', models.CharField(choices=[('2', 'UnVerified'), ('1', 'Pending'), ('3', 'Verified'), ('4', 'Under Review')], default='2', help_text='Designates whether the business is a verified', max_length=30, verbose_name='teir 2 verified')),
                ('legal_name', models.CharField(blank=True, max_length=30, verbose_name='legal name')),
                ('industry_name', models.CharField(blank=True, max_length=30, verbose_name='Industry')),
                ('phone_number', models.CharField(blank=True, max_length=200, validators=[django.core.validators.RegexValidator(re.compile('\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{3}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{3}|\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{3}', 32), 'Only numbers are allowed in format 000-000-000-000', 'invalid')], verbose_name='phone number')),
                ('street_number', models.TextField(blank=True, max_length=400, verbose_name='Street Number')),
                ('street_name', models.TextField(blank=True, max_length=400, verbose_name='Street Name')),
                ('unit', models.TextField(blank=True, max_length=400, verbose_name='Unit')),
                ('city', models.CharField(blank=True, max_length=200, verbose_name='city')),
                ('region', models.CharField(blank=True, max_length=200, verbose_name='region')),
                ('documents', models.ImageField(blank=True, max_length=500, null=True, upload_to=pesaify.users.models.get_business_documents_file_path, verbose_name='documents')),
                ('owner_photo', models.ImageField(blank=True, max_length=500, null=True, upload_to=pesaify.users.models.get_business_owner_photo_file_path, verbose_name='documents')),
                ('proof_of_address', models.ImageField(blank=True, max_length=500, null=True, upload_to=pesaify.users.models.get_business_proof_of_address_file_path, verbose_name='proof of address')),
                ('tin', models.CharField(blank=True, max_length=30, verbose_name='tax id number')),
                ('country', models.CharField(blank=True, choices=[('Uganda', 'Uganda'), ('Kenya', 'Kenya'), ('Tanzania', 'Tanzania')], default='', max_length=30, verbose_name='country')),
                ('website', models.URLField(blank=True, max_length=2000, verbose_name='webiste')),
                ('owner_first_name', models.CharField(blank=True, max_length=256, verbose_name='owner first name')),
                ('owner_middle_name', models.CharField(blank=True, max_length=256, verbose_name='owner middle name')),
                ('owner_last_name', models.CharField(blank=True, max_length=256, verbose_name='owner last name')),
                ('owner_date_of_birth', models.DateField(blank=True, null=True, verbose_name='owner date of birth')),
                ('created_date', models.DateTimeField(auto_now=True, verbose_name='Created Date')),
                ('modified_date', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'business',
                'verbose_name_plural': 'businesses',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='CryptoSettlement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_verified', models.CharField(choices=[('2', 'UnVerified'), ('1', 'Pending'), ('3', 'Verified'), ('4', 'Under Review')], default='2', help_text='Designates whether the settlement is a verified', max_length=30, verbose_name='is verified')),
                ('currency', models.CharField(choices=[('BTC', 'Bitcoin (BTC)'), ('BCH', 'Bitcash (BCH)')], max_length=256, verbose_name='currency')),
                ('address', models.CharField(max_length=100, null=True)),
                ('label', models.CharField(blank=True, default='', max_length=100, verbose_name='label')),
                ('token', models.CharField(blank=True, default=None, max_length=2000, null=True, verbose_name='token')),
                ('created_date', models.DateTimeField(auto_now=True, verbose_name='Created Date')),
                ('modified_date', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='MobileMoneySettlement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_verified', models.CharField(choices=[('2', 'UnVerified'), ('1', 'Pending'), ('3', 'Verified'), ('4', 'Under Review')], default='2', help_text='Designates whether the settlement is a verified', max_length=30, verbose_name='is verified')),
                ('currency', models.CharField(choices=[('MM', 'Mobile Money (MM)')], max_length=256, verbose_name='currency')),
                ('phone_number', models.CharField(max_length=200, validators=[django.core.validators.RegexValidator(re.compile('\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{3}|\\(\\d{3}\\)\\s*\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{3}|\\d{3}[-\\.\\s]??\\d{3}[-\\.\\s]??\\d{3}', 32), 'Only numbers are allowed in format 000-000-000-000', 'invalid')], verbose_name='phone number')),
                ('country', models.CharField(choices=[('Uganda', 'Uganda'), ('Kenya', 'Kenya'), ('Tanzania', 'Tanzania')], default='', max_length=30, verbose_name='country')),
                ('label', models.CharField(default='', max_length=100, verbose_name='label')),
                ('token', models.CharField(blank=True, default=None, max_length=2000, null=True, verbose_name='token')),
                ('created_date', models.DateTimeField(auto_now=True, verbose_name='Created Date')),
                ('modified_date', models.DateTimeField(auto_now=True, verbose_name='Modified Date')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
    ]
